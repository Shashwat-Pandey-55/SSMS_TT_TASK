{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatpandey/Downloads/app/taskmanager/src/context/tasks/TaskState.js\",\n  _s = $RefreshSig$();\n// eslint-disable-next-line\nimport { useState, useEffect } from \"react\";\nimport TaskContext from \"./taskContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskState = props => {\n  _s();\n  const host = \"http://localhost:5500\";\n  const tasksInitial = [];\n  const [tasks, setTasks] = useState(tasksInitial);\n  const [users, setUsers] = useState([]);\n  const [assignedMembersData, setAssignedMembersData] = useState([]); // New state variable\n\n  useEffect(() => {\n    fetchAllTasks();\n    // fetchAllUsers();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // real wala hai ye\n  // // Fetch All Tasks \n  // const fetchAllTasks = async () => {\n  //   try {\n  //     const response = await fetch(`${host}/api/tasks/fetchalltasks`, {\n  //       method: \"GET\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         \"auth-token\": localStorage.getItem(\"token\"),\n  //       },\n  //     });\n  //     const json = await response.json();\n  //     setTasks(json);\n  //   } catch (error) {\n  //     console.error(\"Error fetching tasks:\", error);\n  //   }\n  // };\n\n  // Fetch All Tasks\n  const fetchAllTasks = async () => {\n    try {\n      const response = await fetch(`${host}/api/tasks/fetchalltasks`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\")\n        }\n      });\n      const tasksData = await response.json();\n      console.log(\"Raw tasksData:\", tasksData);\n      // Log assignedMembers before processing\n      console.log(\"Assigned Members data before processing:\");\n      tasksData.forEach(task => console.log(task.assignedMembers));\n\n      // Process the assignedMembers field to extract only the names\n      // const updatedTasks = tasksData.map((task) => ({\n      //   ...task,\n      //   assignedMembers: task.assignedMembers.map((member) => member.name),\n      // }));\n\n      // Process the assignedMembers field to extract only the names\n      const updatedTasks = tasksData.map(task => ({\n        ...task,\n        assignedMembers: task.assignedMembers.map(member => member.name)\n      }));\n\n      // Log assignedMembers after processing\n      console.log(\"Assigned Members data after processing:\");\n      updatedTasks.forEach(task => console.log(task.assignedMembers));\n      console.log(\"Updated Tasks:\", updatedTasks); // Add \n\n      setTasks(updatedTasks);\n      // Save the assignedMembers data separately in assignedMembersData state\n      setAssignedMembersData(updatedTasks.map(task => task.assignedMembers));\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  };\n\n  // Fetch All Users\n  const fetchAllUsers = async () => {\n    try {\n      const response = await fetch(`${host}/api/tasks/fetchallusers`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\")\n        }\n      });\n      const json = await response.json();\n      setUsers(json);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n    }\n  };\n\n  // GET all Tasks\n  const getTasks = async () => {\n    //API call\n    const response = await fetch(`${host}/api/tasks/fetchalltasks`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\")\n      }\n    });\n    const json = await response.json();\n    setTasks(json);\n  };\n\n  // Add a Task\n  const addTask = async (title, description, tag, duedate, users) => {\n    try {\n      if (!users || users.length === 0) {\n        // Display an error message if no user is selected\n        console.log(\"Add a user before adding the task\");\n        return;\n      }\n      const usersArray = Array.isArray(users) ? users : [users];\n      //  const usersArray = []; // Create an empty array to hold the users\n\n      //  // Add the user ID to the usersArray if it exists\n      //  if (loggedInUser) {\n      //    usersArray.push(loggedInUser._id);\n      //  }\n\n      const response = await fetch(`${host}/api/tasks/addtask`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag,\n          duedate,\n          users: usersArray,\n          status: \"Not Started\"\n        })\n      });\n      if (response.ok) {\n        const task = await response.json();\n        setTasks(prevTasks => [...prevTasks, task]);\n        fetchAllTasks();\n      } else {\n        const errorResponse = await response.json();\n        // Handle the case where the response is not successful\n        console.log(\"Task not added. Error:\", response.status);\n        console.log(\"Error Message:\", errorResponse.error);\n      }\n    } catch (error) {\n      // Handle any network or other errors\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // Delete a Task\n  const deleteTask = async id => {\n    // API call\n    const response = await fetch(`${host}/api/tasks/deletetask/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\")\n      }\n    });\n    const json = response.json();\n    console.log(json);\n    const newTasks = tasks.filter(task => {\n      return task._id !== id;\n    });\n    setTasks(newTasks);\n  };\n\n  // Edit a Task\n  const editTask = async (id, title, description, tag, duedate, status) => {\n    //API call\n    const response = await fetch(`${host}/api/tasks/updatetask/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag,\n        duedate,\n        status\n      })\n    });\n    const json = await response.json();\n    console.log(json);\n    let newTasks = JSON.parse(JSON.stringify(tasks));\n\n    // Logic to edit in client\n    for (let index = 0; index < newTasks.length; index++) {\n      const element = newTasks[index];\n      if (element._id === id) {\n        newTasks[index].title = title;\n        newTasks[index].description = description;\n        newTasks[index].tag = tag;\n        newTasks[index].duedate = duedate;\n        newTasks[index].status = status;\n        break;\n      }\n    }\n    setTasks(newTasks);\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      addTask,\n      deleteTask,\n      editTask,\n      getTasks,\n      users,\n      fetchAllTasks,\n      fetchAllUsers,\n      assignedMembersData\n    },\n    children: [props.children, \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskState, \"mRhLkFKOFg3VzdGyZ8iKtdGaVh8=\");\n_c = TaskState;\nexport default TaskState;\nvar _c;\n$RefreshReg$(_c, \"TaskState\");","map":{"version":3,"names":["useState","useEffect","TaskContext","jsxDEV","_jsxDEV","TaskState","props","_s","host","tasksInitial","tasks","setTasks","users","setUsers","assignedMembersData","setAssignedMembersData","fetchAllTasks","response","fetch","method","headers","localStorage","getItem","tasksData","json","console","log","forEach","task","assignedMembers","updatedTasks","map","member","name","error","fetchAllUsers","getTasks","addTask","title","description","tag","duedate","length","usersArray","Array","isArray","body","JSON","stringify","status","ok","prevTasks","errorResponse","deleteTask","id","newTasks","filter","_id","editTask","parse","index","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shashwatpandey/Downloads/app/taskmanager/src/context/tasks/TaskState.js"],"sourcesContent":["// eslint-disable-next-line\nimport { useState, useEffect } from \"react\";\nimport TaskContext from \"./taskContext\";\n\nconst TaskState = (props) => {\n  const host = \"http://localhost:5500\";\n  const tasksInitial = [];\n\n  const [tasks, setTasks] = useState(tasksInitial);\n  const [users, setUsers] = useState([]);\n  const [assignedMembersData, setAssignedMembersData] = useState([]); // New state variable\n\n\n  useEffect(() => {\n    fetchAllTasks();\n    // fetchAllUsers();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // real wala hai ye\n  // // Fetch All Tasks \n  // const fetchAllTasks = async () => {\n  //   try {\n  //     const response = await fetch(`${host}/api/tasks/fetchalltasks`, {\n  //       method: \"GET\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         \"auth-token\": localStorage.getItem(\"token\"),\n  //       },\n  //     });\n  //     const json = await response.json();\n  //     setTasks(json);\n  //   } catch (error) {\n  //     console.error(\"Error fetching tasks:\", error);\n  //   }\n  // };\n\n\n\n  // Fetch All Tasks\nconst fetchAllTasks = async () => {\n  try {\n    const response = await fetch(`${host}/api/tasks/fetchalltasks`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\"),\n      },\n    });\n    const tasksData = await response.json();\n\n    console.log(\"Raw tasksData:\", tasksData);\n      // Log assignedMembers before processing\n      console.log(\"Assigned Members data before processing:\");\n      tasksData.forEach((task) => console.log(task.assignedMembers));\n  \n\n    // Process the assignedMembers field to extract only the names\n    // const updatedTasks = tasksData.map((task) => ({\n    //   ...task,\n    //   assignedMembers: task.assignedMembers.map((member) => member.name),\n    // }));\n\n    \n\n          // Process the assignedMembers field to extract only the names\n          const updatedTasks = tasksData.map((task) => ({\n            ...task,\n            assignedMembers: task.assignedMembers.map((member) => member.name),\n          }));\n\n      // Log assignedMembers after processing\n    console.log(\"Assigned Members data after processing:\");\n    updatedTasks.forEach((task) => console.log(task.assignedMembers));\n  \n\n    console.log(\"Updated Tasks:\", updatedTasks); // Add \n\n    setTasks(updatedTasks);\n    // Save the assignedMembers data separately in assignedMembersData state\n    setAssignedMembersData(updatedTasks.map((task) => task.assignedMembers));\n\n\n  } catch (error) {\n    console.error(\"Error fetching tasks:\", error);\n  }\n};\n\n\n\n  // Fetch All Users\n  const fetchAllUsers = async () => {\n    try {\n      const response = await fetch(`${host}/api/tasks/fetchallusers`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\"),\n        },\n      });\n      const json = await response.json();\n      setUsers(json);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n    }\n  };\n\n\n\n\n  // GET all Tasks\n  const getTasks = async () => {\n    //API call\n    const response = await fetch(`${host}/api/tasks/fetchalltasks`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\"),\n      },\n    });\n    const json = await response.json();\n    setTasks(json);\n  };\n\n\n\n// Add a Task\nconst addTask = async (title, description, tag, duedate, users) => {\n  try {\n\n    if (!users || users.length === 0) {\n      // Display an error message if no user is selected\n      console.log(\"Add a user before adding the task\");\n      return;\n    }\n    const usersArray = Array.isArray(users) ? users : [users];\n  //  const usersArray = []; // Create an empty array to hold the users\n\n  //  // Add the user ID to the usersArray if it exists\n  //  if (loggedInUser) {\n  //    usersArray.push(loggedInUser._id);\n  //  }\n \n    const response = await fetch(`${host}/api/tasks/addtask`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\"),\n      },\n      body: JSON.stringify({ title, description, tag, duedate, users: usersArray,status: \"Not Started\"}),\n    });\n\n    if (response.ok) {\n      const task = await response.json();\n      setTasks((prevTasks) => [...prevTasks, task]);\n      fetchAllTasks();\n    } else {\n      const errorResponse = await response.json();\n      // Handle the case where the response is not successful\n      console.log(\"Task not added. Error:\", response.status);\n      console.log(\"Error Message:\", errorResponse.error); \n    }\n  } catch (error) {\n    // Handle any network or other errors\n    console.error(\"Error adding task:\", error);\n  }\n};\n\n\n\n\n\n  // Delete a Task\n  const deleteTask = async (id) => {\n    // API call\n    const response = await fetch(`${host}/api/tasks/deletetask/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\"),\n      },\n    });\n\n    const json = response.json();\n    console.log(json);\n    const newTasks = tasks.filter((task) => {\n      return task._id !== id;\n    });\n    setTasks(newTasks);\n  };\n\n\n\n  // Edit a Task\n  const editTask = async (id, title, description, tag, duedate, status) => {\n    //API call\n    const response = await fetch(`${host}/api/tasks/updatetask/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\"),\n      },\n      body: JSON.stringify({ title, description, tag, duedate, status}),\n    });\n\n    const json = await response.json();\n    console.log(json);\n    let newTasks = JSON.parse(JSON.stringify(tasks));\n\n    // Logic to edit in client\n    for (let index = 0; index < newTasks.length; index++) {\n      const element = newTasks[index];\n      if (element._id === id) {\n        newTasks[index].title = title;\n        newTasks[index].description = description;\n        newTasks[index].tag = tag;\n        newTasks[index].duedate = duedate;\n        newTasks[index].status = status;\n        break; \n      }\n    }\n    setTasks(newTasks);\n  };\n\n  return (\n    <TaskContext.Provider\n      value={{ tasks, addTask, deleteTask, editTask, getTasks, users,  fetchAllTasks, fetchAllUsers, assignedMembersData,}}\n    >\n      {props.children};\n    </TaskContext.Provider>\n  );\n};\n\nexport default TaskState;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}